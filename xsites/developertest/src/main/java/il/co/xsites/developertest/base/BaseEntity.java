package il.co.xsites.developertest.base;

import il.co.xsites.developertest.base.ro.BaseRO;

import javax.persistence.*;
import java.io.Serializable;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

/**
 * Base class for Hibernate entities.
 */
@MappedSuperclass
public abstract class BaseEntity implements Serializable {

	//------------------------ Constants -----------------------
	private static final long serialVersionUID = 1L;

	//------------------------ Fields --------------------------
	// UUID â€“ should be generated by Hibernate
	private long id;

	private Date creationTime;

	//------------------------ Public methods ------------------
	//------------------------ Constructors --------------------
	protected BaseEntity() {
		this.creationTime = new Date();
	}

	@Transient
	protected static <T extends BaseEntity> Set<Long> getIds(Set<T> entities) {
		return (Set<Long>) fillIds(entities, new HashSet<Long>());
	}

	//------------------------ Private methods -----------------
	private static <T extends BaseEntity> Collection<Long> fillIds(Collection<T> entities,
			Collection<Long> result) {
		if(null != entities) {
			for(BaseEntity entity : entities) {
				result.add(entity.getId());
			}
			return result;
		}
		return null;
	}

	//------------------------ Field's handlers ----------------
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id")
	public long getId() {
		return id;
	}

	public void setId(long id) {
		this.id = id;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "creation_time", nullable = false, updatable = false)
	public Date getCreationTime() {
		return creationTime;
	}

	public void setCreationTime(Date creationTime) {
		this.creationTime = creationTime;
	}

	//------------------------ Other public methods ------------
	@Override
	public boolean equals(Object o) {
		if(null == o) {
			return false;
		}
		if(this == o) {
			return true;
		}

		BaseEntity that = (BaseEntity) o;

		return getId() == that.getId();
	}

	@Override
	public int hashCode() {
		int result = (int) (getId() ^ (getId() >>> 32));
		result = 31 * result;
		return result;
	}

	@SuppressWarnings("unchecked")
	@Transient
	public <T extends BaseRO> T getRepresentation() {
		T ro = (T) newRepresentation();
		ro.setId(getId());
		ro.setCreationTime(getCreationTime().getTime());
		return ro;
	}

	protected abstract <T extends BaseRO> T newRepresentation();
}
